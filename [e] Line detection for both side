import cv2
import numpy as np
import serial
import time

def process_image(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blur, 50, 150)
    return edges

def detect_lines(edges):
    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=50, minLineLength=50, maxLineGap=10)
    left_line, right_line = None, None
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line[0]
            slope = (y2 - y1) / (x2 - x1) if x2 - x1 != 0 else 0
            if slope < 0:  # Left line
                left_line = (x1, y1, x2, y2)
            else:  # Right line
                right_line = (x1, y1, x2, y2)
    return left_line, right_line

def calculate_midpoint(left_line, right_line):
    left_mid = ((left_line[0] + left_line[2]) // 2, (left_line[1] + left_line[3]) // 2)
    right_mid = ((right_line[0] + right_line[2]) // 2, (right_line[1] + right_line[3]) // 2)
    centerline = ((left_mid[0] + right_mid[0]) // 2, (left_mid[1] + right_mid[1]) // 2)
    return centerline

def get_robocar_position(frame):
    return frame.shape[1] // 2, frame.shape[0]

def main():
    camera = cv2.VideoCapture(0)
    arduino = serial.Serial('/dev/ttyACM0', 9600)  # Update the port as needed
    time.sleep(2)  # Wait for the Arduino to initialize

    while True:
        ret, frame = camera.read()
        if not ret:
            break

        edges = process_image(frame)
        left_line, right_line = detect_lines(edges)

        if left_line is not None and right_line is not None:
            centerline = calculate_midpoint(left_line, right_line)
            robocar_position = get_robocar_position(frame)
            deviation = robocar_position[0] - centerline[0]

            arduino.write(f"{deviation}\n".encode())

            # Draw lines for debugging
            cv2.line(frame, (left_line[0], left_line[1]), (left_line[2], left_line[3]), (0, 255, 0), 2)
            cv2.line(frame, (right_line[0], right_line[1]), (right_line[2], right_line[3]), (0, 255, 0), 2)
            cv2.line(frame, (robocar_position[0], robocar_position[1]), (centerline[0], centerline[1]), (255, 0, 0), 2)
        
        cv2.imshow('Frame', frame)
        cv2.imshow('Edges', edges)
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    camera.release()
    cv2.destroyAllWindows()
    arduino.close()

if __name__ == '__main__':
    main()
